name: Continious Integration and Deployment
env:
  WORKSPACE_ENVIRONMENT_VARIABLE: 'custom workspace environment variable'
  CLUSTER_NAME: LeagueManager
  RESOURCE_GROUP: LeagueManager
on:
  push:
    branches:
      - master

jobs:
  pre-build:
    name: Pre-build information
    env:
      JOB_ENVIRONMENT_VARIABLE: 'custom job environment variable for ubuntu'
    runs-on: ubuntu-latest
    steps:
    - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    - run: echo "${{ secrets.PASSWORD }}"
    - name: Print custom environment variables from ubuntu-latest
      env:
        STEP_ENVIRONMENT_VARIABLE: 'custom step environment variable for bash'
      run: |
        echo "Accessing environment variables in run command"
        echo "$WORKSPACE_ENVIRONMENT_VARIABLE"
        echo "$JOB_ENVIRONMENT_VARIABLE"
        echo "$STEP_ENVIRONMENT_VARIABLE"

  build:
    name: Building the WebApp and Upload Docker image
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup .NET 5  
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      
      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Project
        run: dotnet build -c Release --no-restore
      
      - name: Run automated tests
        run: dotnet test -c Release --no-build

  docker-image:
    name: Building and upload Docker image to DockerHub
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
     
      - name: Setup .NET 5  
        uses: actions/setup-dotnet@v1
        with:
           dotnet-version: '5.0.x'
      
      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Project
        run: dotnet build -c Release --no-restore

      - name: docker build
        run: docker build -t leaguemanager:'${{github.sha}}' .

      - name: docker login
        run: docker login --username '${{secrets.DOCKER_LOGIN}}' --password '${{secrets.DOCKER_PASSWORD}}'

      - name: tag docker image
        run: docker tag leaguemanager:'${{github.sha}}' '${{secrets.DOCKER_LOGIN}}'/leaguemanager:'${{github.sha}}'

      - name: push docker image
        run: docker push '${{secrets.DOCKER_LOGIN}}'/leaguemanager:'${{github.sha}}'

  deploy-aks:
    name: Create AKS
    needs: docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
 
      - uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
 
      - uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{secrets.SUBSCRIPTION_ID}}
          resourceGroupName: LeagueManager
          template: ./aks/deploy.json
          parameters: ./aks/deployparams.json
 
      - uses: azure/setup-kubectl@v1
        with:
          version: 'v1.18.8'
 
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{secrets.AZURE_CREDENTIALS}}'
          cluster-name: ${{env.CLUSTER_NAME}}
          resource-group: ${{env.RESOURCE_GROUP}}

  sonarcloud:
    name: SonarCloud Scan
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"pboychev_LeagueManager" /o:"pboychev" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet restore
          dotnet build -c Release --no-restore
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"